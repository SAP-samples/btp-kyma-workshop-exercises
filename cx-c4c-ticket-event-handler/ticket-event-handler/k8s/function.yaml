apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: ticket-event-handler
  namespace: mocks
  labels:
    app: ticket-event-handler
    example: ticket-event-handler
spec:
  deps: |-
    { 
      "name": "ticket-event-handler",
      "version": "1.0.0",
      "dependencies": {
            "axios": "^0.21.1",
            "@sendgrid/mail": "^7.4.6"
      }
    }
  maxReplicas: 1
  minReplicas: 1
  resources:
    limits:
      cpu: 20m
      memory: 32Mi
    requests:
      cpu: 10m
      memory: 16Mi
  env:
    - name: SENDGRID_API_KEY
      value: "SENDGRID_API_KEY"
    - name: SENDGRID_SENDER_EMAIL
      value: "SENDGRID_SENDER_EMAIL"
  source: |-
    const axios = require("axios").default;
    const sgMail = require("@sendgrid/mail");
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    const C4C_GATEWAY_URL = process.env["SAP_CLOUD_FOR_CUSTOMER_TICKET_API_5FBF7B9A_1E4D_472C_B1A1_1DCE562AED58_GATEWAY_URL"];
    const CONFIRMATION_SUBJECT = "Ticket Creation Confirmation";

    module.exports = { 
      main: async function (event, context) {
        if (event.data && event.data["entity-id"] && event.data["entity-id"]["entity-id"]) {
          const objectID = event.data["entity-id"]["entity-id"];
          console.log("Processing ticket with ObjectID: ", objectID); 
          const serviceRequestResponse = await getMockServiceRequest(objectID);
          if (serviceRequestResponse.d.results && serviceRequestResponse.d.results.ID)  {
            const serviceRequestID = serviceRequestResponse.d.results.ID;
            const reporterPartyresponse = await getMockReporterParty(objectID);
            if (reporterPartyresponse.d.results && reporterPartyresponse.d.results.length !== 0 && reporterPartyresponse.d.results[0].PartyName && reporterPartyresponse.d.results[0].Email)  {
              const name = reporterPartyresponse.d.results[0].PartyName;
              console.log('Name: ', name);
              const email = reporterPartyresponse.d.results[0].Email;
              console.log('Email: ', email);
              const emailBodyText = `Hello ${name}, This is to confirm that your ticket was created. Thanks, The CX C4C Team` 
              const emailBodyHtml = `Hello ${name},<br><br>This is to confirm that your ticket with ID ${serviceRequestID} was created.<br><br>Thanks,<br>The CX C4C Team` 
              await sendEmail(email, CONFIRMATION_SUBJECT, emailBodyText, emailBodyHtml);
            } else {
              console.log('No Email');
            }
          } else {
            console.log('No Result');
          }
        } else {
            console.log('No ObjectID to be processed.');
        }
      }
    }

    async function getMockServiceRequest(objectID) {
      const url = `${C4C_GATEWAY_URL}/ServiceRequests`;
      console.log("Getting ServiceRequest via: %s", url, " for objectID: ", objectID);
      const filter = {"where":{"ObjectID":objectID}};
      const response = await axios.get(url, {
        params: {
          filter: encodeURI(JSON.stringify(filter))
        }
      });
      //console.log('response: ', JSON.stringify(response.data, null, 2));
      return response.data;
    }

    async function getMockReporterParty(objectID) {
      const url = `${C4C_GATEWAY_URL}/ServiceRequestPartys`;
      console.log("Getting reporter party via: %s", url, " for objectID: ", objectID);
      const filter = {"where":{"and":[{"ParentObjectID":objectID},{"RoleCategoryCodeText":"Reporter Party"}]}};
      const response = await axios.get(url, {
        params: {
          filter: encodeURI(JSON.stringify(filter))
        }
      });
      //console.log('response: ', JSON.stringify(response.data, null, 2));
      return response.data;
    }

    async function sendEmail(email, subject, text, html) {
      const msg = {
        to: email, 
        from: process.env.SENDGRID_SENDER_EMAIL, 
        subject: subject,
        text: text,
        html: html
      }
      return sgMail
        .send(msg)
        .then(() => {
          console.log("Mail sent");
        }, error => {
          console.error(error);
          if (error.response) {
            console.error(error.response.body)
          }
      });
    }